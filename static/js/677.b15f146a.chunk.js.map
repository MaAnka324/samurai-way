{"version":3,"file":"static/js/677.b15f146a.chunk.js","mappings":"mLACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0B,SCe7K,EATgB,SAACA,GACb,OACI,gBAAKC,UAAWC,EAAhB,SAA2BF,EAAMG,W,UCUzC,EARmB,SAACH,GAChB,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,UAAC,KAAD,CAASE,GAAI,YAAcJ,EAAMK,GAAjC,UAAsCL,EAAMM,KAA5C,U,iDCULC,GAAeC,EAAAA,EAAAA,GAAU,IAgB1BC,GAAmBC,EAAAA,EAAAA,GAA+B,CACpDC,KAAM,WADeD,EAdgD,SAACV,GACtE,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOR,KAAM,UACNS,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBY,YAAY,wBAEnB,2CA0CZ,EA/BgB,SAACnB,GACb,IAIIoB,EAAkBpB,EAAMqB,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAD,CAE9CjB,KAAMiB,EAAOjB,KACbD,GAAIkB,EAAOlB,IAFNkB,EAAOlB,OAKZmB,EAAkBxB,EAAMyB,SAASH,KAAI,SAAAnB,GAAO,OAAI,SAAC,EAAD,CAEhDA,QAASA,EAAQA,SADZA,EAAQE,OAIjB,OAAKL,EAAM0B,QAGP,iBAAKzB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkB,KAEL,gBAAKnB,UAAWC,EAAhB,SACKsB,KAEL,SAACf,EAAD,CAAkBG,SAzBT,SAACe,GACd3B,EAAM4B,WAAWD,EAASxB,gBAcJ,SAAC,KAAD,CAAUC,GAAI,Y,qEC9C5C,EAZyB,SAACyB,GAAoB,IAEpCC,EAFmC,0IAGrC,WACI,OAAIC,KAAK/B,MAAM0B,QACR,SAACG,GAAD,UAAeE,KAAK/B,SADG,SAAC,KAAD,CAAUI,GAAI,eAJX,GAER4B,EAAAA,WAOjC,OAAOF,GCsEX,GAAeG,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KA5BkB,SAACC,GACnB,MAAO,CACHd,QAASc,EAAMC,YAAYf,QAC3BI,SAAUU,EAAMC,YAAYX,SAE5BC,OAAQS,EAAME,KAAKX,WAIF,SAACY,GACtB,MAAO,CACHV,WAAY,SAACW,GACTD,GAASE,EAAAA,EAAAA,GAAcD,SAiB/BE,EAAAA,GACAC,EAHJ,CAIEC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__J69Et\",\"dialogsItems\":\"Dialogs_dialogsItems__T0OAE\",\"dialog\":\"Dialogs_dialog__lX1--\",\"active\":\"Dialogs_active__PeH8A\",\"messages\":\"Dialogs_messages__mU4XD\",\"message\":\"Dialogs_message__ZZy+0\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props:MessageType) => {\r\n    return(\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Message","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props:DialogItemType) => {\r\n    return(\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {DialogsType, MessagesType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLength, required} from \"../../utils/validators/valodators\";\r\n\r\n\r\nexport type DialogsPropsType = {\r\n    addMessage: (message: string) => void\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    dialogs: DialogsType[]\r\n    messages: MessagesType[]\r\n    newMessageText: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MessageFormDataType = {\r\n    message: string\r\n}\r\n\r\nconst  maxLength50 =  maxLength(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'message'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLength50]}\r\n                   placeholder='Enter your message'\r\n            ></Field>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst MessageReduxForm = reduxForm<MessageFormDataType>({\r\n    form: 'message'\r\n})(AddMessageForm)\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    const onSubmit = (formData: MessageFormDataType) => {\r\n        props.addMessage(formData.message)\r\n    }\r\n\r\n    let dialogsElements = props.dialogs.map(dialog => <DialogItem\r\n        key={dialog.id}\r\n        name={dialog.name}\r\n        id={dialog.id}\r\n    />)\r\n\r\n    let messagesElement = props.messages.map(message => <Message\r\n        key={message.id}\r\n        message={message.message}\r\n    />)\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElement}\r\n            </div>\r\n            <MessageReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst WithAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponents extends React.Component<any, any> {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return RedirectComponents\r\n};\r\n\r\nexport default WithAuthRedirect;","import React from 'react';\r\nimport {sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStoreRootStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\n\r\n// type DialogsPropsType = {\r\n    // dialogs: DialogsType[]\r\n    // messages: MessagesType[]\r\n    // dispatch: (action: DialogsActionsTypes) => void\r\n    // newMessageText: string\r\n//     store: StoreType\r\n// }\r\n// const DialogsContainer = (props: any) => {\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 store => {\r\n//                     let state = store.getState().dialogsPage\r\n//\r\n//                     const addMessage = () => {\r\n//                         store.dispatch(sendMessageAC(state.newMessageText))\r\n//                     }\r\n//\r\n//                     const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//                         store.dispatch(newMessageTextAC(e.currentTarget.value))\r\n//                     }\r\n//\r\n//                     return (\r\n//                         <Dialogs\r\n//                             addMessage={addMessage}\r\n//                             onChange={onChange}\r\n//                             dialogs={state.dialogs}\r\n//                             messages={state.messages}\r\n//                             newMessageText={state.newMessageText}\r\n//                         />\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n// let AuthRedirectComponent = (props: DialogsPropsType) => {\r\n//     if(!props.isAuth) return <Redirect to={'/login'}/>\r\n//     return <Dialogs {...props}/>\r\n// }\r\n\r\nlet mapStateToProps = (state: ReduxStoreRootStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        // newMessageText: state.dialogsPage.newMessageText,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        },\r\n        // onChange: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        //     dispatch(newMessageTextAC(e.currentTarget.value))\r\n        // }\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n\r\n// export default DialogsContainer"],"names":["props","className","s","message","to","id","name","maxLength50","maxLength","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","dialogsElements","dialogs","map","dialog","messagesElement","messages","isAuth","formData","addMessage","Component","RedirectComponents","this","React","compose","connect","state","dialogsPage","auth","dispatch","newMessageBody","sendMessageAC","withRouter","withAuthRedirect","Dialogs"],"sourceRoot":""}