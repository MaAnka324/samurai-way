{"version":3,"file":"static/js/951.ca58bf64.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/MyPosts/ProfileStatusWithHooks.tsx","components/Profile/ProfileDataForm.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"Profile_descriptionBlock__T0wfu\"};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__WnKSr\",\"posts\":\"MyPosts_posts__Ocy+a\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__fe6kd\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\n// let s = {\r\n//     'item': 'Profile_item__TYOiq',\r\n//     'content': 'Profile_content__LWBsZ '\r\n// }\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\nconst Post = (props:MessagePropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://www.ochkov.net/wiki/wiki/storage/app/uploads/public/5d7/a08/0c6/5d7a080c6de1b874225893.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>LIKE </span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../../utils/validators/valodators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsType = {\r\n    addPost: (newPost: string) => void\r\n    posts: PostsType[]\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    messageForNewPost: string\r\n}\r\n\r\ntype PostFormDataType = {\r\n    post: string\r\n}\r\n\r\nconst  maxLength10 =  maxLength(10)\r\n\r\nconst MyPostsForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLength10]}\r\n                   placeholder={'Post message'}\r\n            ></Field>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst PostReduxForm = reduxForm<PostFormDataType>({\r\n    form: 'post'\r\n})(MyPostsForm)\r\n\r\n\r\nconst MyPosts = React.memo( (props: MyPostsType) => {\r\n    const onSubmit = (formData: PostFormDataType) => {\r\n        props.addPost(formData.post)\r\n    }\r\n\r\n    let postElement = props.posts.map(p => <Post\r\n        key={p.id}\r\n        message={p.message}\r\n        likesCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <PostReduxForm onSubmit={onSubmit}/>\r\n            <div className={s.posts}>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts","import React, {ChangeEvent} from 'react';\r\nimport MyPosts from \"../MyPosts\";\r\nimport {addPostAC, changeNewTextAC} from \"../../../../redux/profile-reducer\";\r\nimport {ReduxStoreRootStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// type MyPostsContainerType = {\r\n// messageForNewPost: string\r\n// posts: ProfileType[]\r\n// dispatch: (action: ProfileActionsTypes) => void\r\n// store: StoreType\r\n// }\r\n// const MyPostsContainer = (props: any) => {\r\n//\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 store => {\r\n//                     let state = props.store.getState().profilePage\r\n//\r\n//                     const addPost = () => {\r\n//                         store.dispatch(addPostAC(state.messageForNewPost))\r\n//                     }\r\n//\r\n//                     const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//                         store.dispatch(changeNewTextAC(e.currentTarget.value))}\r\n//\r\n//\r\n//                     return (\r\n//                         <MyPosts addPost={addPost}\r\n//                                  onChange={onChange}\r\n//                                  posts={state.post}\r\n//                                  messageForNewPost={state.messageForNewPost}\r\n//                         />\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\nlet mapStateToProps = (state: ReduxStoreRootStateType) => {\r\n    return {\r\n        posts: state.profilePage.post,\r\n        messageForNewPost: state.profilePage.messageForNewPost\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            dispatch(addPostAC(newPost))\r\n        },\r\n        onChange: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            dispatch(changeNewTextAC(e.currentTarget.value))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype StatusType = {\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: StatusType) => {\r\n\r\n    const [editeMode, setEditeMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        if(props.isOwner) {\r\n            setEditeMode(true)\r\n        }\r\n    }\r\n\r\n    const deactivateMode = () => {\r\n        setEditeMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editeMode &&\r\n                <div><b>Status : </b>\r\n                    <span onDoubleClick={activateMode}>{props.status || '------'}</span>\r\n                </div>\r\n            }\r\n            {editeMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateMode}\r\n                        autoFocus={true}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../../src/components/common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../src/utils/validators/valodators\";\r\nimport {ContactsType, ProfileType} from \"../../../src/redux/profile-reducer\";\r\nimport {useAppSelector} from \"../../../src/redux/redux-store\";\r\nimport style from \"../../../src/components/common/FormsControls/FormControl.module.css\";\r\n\r\n\r\nexport type FormProfileDataType = {\r\n    fullName: string;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    aboutMe: string;\r\n    contacts?: ContactsType | null | undefined\r\n};\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<FormProfileDataType>> = (props) => {\r\n    const {handleSubmit, error} = props;\r\n\r\n    const profile = useAppSelector(state => state.profilePage.profile)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <b>Name : </b>\r\n                <Field\r\n                    name={'fullName'}\r\n                    placeholder={'fullName'}\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a Job :</b>\r\n                <Field\r\n                    name={'lookingForAJob'}\r\n                    placeholder={'lookingForAJob'}\r\n                    component={Input}\r\n                    type='checkbox'\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                <Field\r\n                    name={'lookingForAJobDescription'}\r\n                    placeholder={'lookingForAJobDescription'}\r\n                    component={Input}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>About me</b>\r\n                <Field\r\n                    name={'aboutMe'}\r\n                    placeholder={'aboutMe'}\r\n                    component={Input}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>Contacts </b>\r\n                {profile?.contacts && Object.keys(profile.contacts).map(key => {\r\n                    return (\r\n                        <div key={key}>\r\n                            {key}: <Field\r\n                            name={'contacts.' + key}\r\n                            placeholder={key}\r\n                            component={Input}\r\n                        />\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const ProfileReduxForm = reduxForm<FormProfileDataType>({\r\n    form: 'edit-profile',\r\n})(ProfileDataForm);\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './Profile.module.css'\r\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\r\nimport {PostsType, ProfileType} from \"../../redux/profile-reducer\";\r\nimport userPhoto from '../../assets/images/UserIcon.png'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Box from \"@mui/material/Box\";\r\nimport ProfileStatusWithHooks from \"../../../src/components/Profile/MyPosts/ProfileStatusWithHooks\";\r\nimport {FormProfileDataType, ProfileReduxForm} from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: FormProfileDataType) => void\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!props.profile) {\r\n        return <Box sx={{display: 'flex'}}>\r\n            <CircularProgress/>\r\n        </Box>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: FormProfileDataType) => {\r\n        props.saveProfile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={props.profile.photos?.large ? props.profile.photos.large : userPhoto}\r\n                />\r\n                {props.isOwner && <input type='file' onChange={mainPhotoSelected}/>}\r\n            </div>\r\n            <ProfileStatusWithHooks isOwner={props.isOwner} status={props?.status} updateStatus={props?.updateStatus}/>\r\n            {editMode\r\n                ? <div>\r\n                    <ProfileReduxForm initialValues={props.profile} onSubmit={onSubmit}/>\r\n                    <button onClick={() => {\r\n                        setEditMode(false)}}>go to profile</button>\r\n                </div>\r\n                : <div>\r\n                    <ProfileData profile={props.profile}\r\n                                 status={props.status}\r\n                                 updateStatus={props.updateStatus}\r\n                                 isOwner={props.isOwner}\r\n                                 goToEditMode={() => {\r\n                                     setEditMode(true)\r\n                                 }}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ninterface ProfilePropsTypeNew {\r\n    profile: ProfileType | null,\r\n    post: PostsType[]\r\n    messageForNewPost: string\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    isAuth: boolean\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: FormProfileDataType) => void\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsTypeNew) => {\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile?: ProfileType | null\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n    goToEditMode: () => void\r\n    isOwner: boolean\r\n}\r\n\r\n\r\nconst ProfileData = (props: ProfileDataType) => {\r\n    return <div>\r\n        <div>\r\n            <b>Name : </b> {props?.profile?.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a Job :</b> {props?.profile?.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        <div>\r\n            <b>My professional\r\n                skills:</b> {props?.profile?.lookingForAJobDescription ? props.profile.lookingForAJobDescription : \"------\"}\r\n        </div>\r\n        <div>\r\n            <b>About me </b>{props?.profile?.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts </b>\r\n            {props?.profile?.contacts && Object.keys(props?.profile?.contacts).map(key => {\r\n                const contacts = props?.profile?.contacts! as ContactsType\r\n                return (\r\n                    <Contacts\r\n                        key={key}\r\n                        contactTitle={key}\r\n                        contactValue={contacts[key as keyof ContactsType]}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n        {props.isOwner && <div>\r\n            {<button onClick={props.goToEditMode}>edit</button>}\r\n        </div>}\r\n\r\n    </div>\r\n}\r\n\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactValue?: string | null\r\n}\r\n\r\nconst Contacts = (props: ContactsType) => {\r\n    return (\r\n        <div>\r\n            <b>\r\n                {props.contactTitle}\r\n            </b>\r\n            : {props.contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport {\r\n    getStatusTC,\r\n    PostsType,\r\n    ProfileType, savePhotoTC, saveProfileTC,\r\n    setUsersProfile,\r\n    setUsersProfileTC,\r\n    updateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStoreRootStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {FormProfileDataType} from \"../../../src/components/Profile/ProfileDataForm\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId as string\r\n            //userId = '28555'\r\n\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.setUsersProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatusTC}\r\n                         savePhoto={this.props.savePhotoTC}\r\n                         saveProfile={this.props.saveProfileTC}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: ReduxStoreRootStateType): MapStatePropsForRedirectType => ({\r\n    //isAuth: state.auth.isAuth\r\n})\r\n\r\n//AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent)\r\n\r\n// let AuthRedirectComponent = (props: PropsType) => {\r\n//     if(!props.isAuth) return <Redirect to={'/login'}/>\r\n//     return <ProfileContainer {...props}/>\r\n// }\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    post: Array<PostsType>\r\n    messageForNewPost: string\r\n    profile: null | ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: string | null\r\n}\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    // isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    setUsersProfileTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC: (file: File) => void\r\n    saveProfileTC: (data: FormProfileDataType) => void\r\n}\r\n\r\ntype ProfilePropsType = MapStatePropsType & MapDispatchPropsType // & MapStatePropsForRedirectType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nlet mapStateToProps = (state: ReduxStoreRootStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    post: state.profilePage.post,\r\n    messageForNewPost: state.profilePage.messageForNewPost,\r\n    isAuth: state.auth.isAuth,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id\r\n})\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\r\n\r\n// let WithDataContainerComponent = withRouter(AuthRedirectComponent)\r\n//\r\n// export default connect(mapStateToProps, {\r\n//     setUsersProfile,\r\n//     setUsersProfileTC\r\n// })(WithDataContainerComponent)\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setUsersProfile,\r\n        setUsersProfileTC,\r\n        getStatusTC,\r\n        updateStatusTC,\r\n        savePhotoTC,\r\n        saveProfileTC\r\n    }),\r\n    withRouter,\r\n    // WithAuthRedirect\r\n)(ProfileContainer)"],"names":["props","className","s","src","message","likesCount","maxLength10","maxLength","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","React","postElement","posts","map","p","id","formData","addPost","post","connect","state","profilePage","messageForNewPost","dispatch","newPost","addPostAC","onChange","e","changeNewTextAC","currentTarget","value","MyPosts","useState","editeMode","setEditeMode","status","setStatus","useEffect","onDoubleClick","isOwner","onBlur","updateStatus","autoFocus","ProfileReduxForm","error","profile","useAppSelector","Input","type","contacts","Object","keys","key","style","ProfileInfo","editMode","setEditMode","Box","sx","display","CircularProgress","photos","large","userPhoto","target","files","length","savePhoto","initialValues","saveProfile","onClick","ProfileData","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contacts","contactTitle","contactValue","isAuth","to","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","setUsersProfileTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","updateStatusTC","savePhotoTC","saveProfileTC","compose","auth","setUsersProfile","withRouter"],"sourceRoot":""}