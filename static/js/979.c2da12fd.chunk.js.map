{"version":3,"file":"static/js/979.c2da12fd.chunk.js","mappings":"mOACA,EAAmC,kCCAnC,EAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mB,SCwBvB,EAba,SAACA,GACV,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAI,uGACRH,EAAMI,SACP,4BACI,oCACCJ,EAAMK,kB,uCCChBC,GAAeC,EAAAA,EAAAA,GAAU,IAgB1BC,GAAgBC,EAAAA,EAAAA,GAA4B,CAC9CC,KAAM,QADYD,EAd6C,SAACT,GAChE,OACI,kBAAMW,SAAUX,EAAMY,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,KAAM,OACNC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUZ,GACrBa,YAAa,kBAEpB,+CAgCZ,EArBgBC,EAAAA,MAAY,SAACpB,GACzB,IAIIqB,EAAcrB,EAAMsB,MAAMC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAEnCpB,QAASoB,EAAEpB,QACXC,WAAYmB,EAAEnB,YAFTmB,EAAEC,OAIX,OACI,iBAAKxB,UAAWC,EAAhB,WACI,sCACA,SAACM,EAAD,CAAeG,SAZN,SAACe,GACd1B,EAAM2B,QAAQD,EAASE,UAYnB,gBAAK3B,UAAWC,EAAhB,SACKmB,U,UCSjB,GAHyBQ,EAAAA,EAAAA,KAlBH,SAACC,GACnB,MAAO,CACHR,MAAOQ,EAAMC,YAAYH,KACzBI,kBAAmBF,EAAMC,YAAYC,sBAIpB,SAACC,GACtB,MAAO,CACHN,QAAS,SAACO,GACND,GAASE,EAAAA,EAAAA,IAAUD,KAEvBE,SAAU,SAACC,GACPJ,GAASK,EAAAA,EAAAA,IAAgBD,EAAEE,cAAcC,YAK5BX,CAA6CY,G,iDCZtE,EA1C+B,SAACzC,GAE5B,OAAkC0C,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAS1C,EAAM6C,QAA3C,eAAOA,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAU9C,EAAM6C,UACjB,CAAC7C,EAAM6C,SAcV,OACI,4BACMF,IACE,uCACI,iBAAMK,cAhBD,WACjBJ,GAAa,IAeD,SAAoC5C,EAAM6C,QAAU,cAG3DF,IACG,0BACI,kBACIP,SAbG,SAACC,GACpBS,EAAUT,EAAEE,cAAcC,QAaVS,OAnBG,WACnBL,GAAa,GACb5C,EAAMkD,aAAaL,IAkBHM,WAAW,EACXX,MAAOK,UCvBzBO,EAAc,SAACpD,GAA4B,IAAD,EAC5C,IAAKA,EAAMqD,QACP,OAAO,SAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,QAAS,QAAnB,UACH,SAACC,EAAA,EAAD,MAYR,OACI,4BAKI,yBACKzD,EAAMqD,QAAQK,YAEnB,sCACe1D,EAAMqD,QAAQM,YAE7B,iBAAK1D,UAAWC,EAAhB,WACI,gBACIC,IAAK,UAAAH,EAAMqD,QAAQO,cAAd,SAAsBC,MAAQ7D,EAAMqD,QAAQO,OAAOC,MAAQC,IAEnE9D,EAAM+D,UAAW,kBAAOC,KAAK,OAAO5B,SAvBvB,SAACC,GACpBA,EAAE4B,OAAOC,OAAS7B,EAAE4B,OAAOC,MAAMC,QAChCnE,EAAMoE,UAAU/B,EAAE4B,OAAOC,MAAM,QAsB3B,SAAC,EAAD,CAAwBrB,OAAQ7C,EAAM6C,OAAQK,aAAclD,EAAMkD,sBAyClF,EAlBgB,SAAClD,GAEb,OAAIA,EAAMqE,QAGN,4BACI,SAACjB,EAAD,CACIC,QAASrD,EAAMqD,QACfR,OAAQ7C,EAAM6C,OACdK,aAAclD,EAAMkD,aACpBa,QAAS/D,EAAM+D,QACfK,UAAWpE,EAAMoE,aAErB,SAAC,EAAD,QAXiB,SAAC,KAAD,CAAUE,GAAI,Y,UC5DrCC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAwCD,OAxCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAASC,KAAKzE,MAAM0E,MAAMC,OAAOH,OACrCI,QAAQC,IAAIJ,KAAKzE,OACZwE,IACDA,EAASC,KAAKzE,MAAM8E,mBAIhBL,KAAKzE,MAAM+E,QAAQC,KAAK,UAIhCP,KAAKzE,MAAMiF,kBAAkBT,GAC7BC,KAAKzE,MAAMkF,YAAYV,KAC1B,+BAED,WACIC,KAAKU,mBACR,gCAED,SAAmBC,EAAgCC,EAAyBC,GACpEb,KAAKzE,MAAM0E,MAAMC,OAAOH,QAAUY,EAAUV,MAAMC,OAAOH,QACzDC,KAAKU,mBAEZ,oBAED,WACI,OACI,0BACI,SAAC,GAAD,kBAAaV,KAAKzE,OAAlB,IACS+D,SAAUU,KAAKzE,MAAM0E,MAAMC,OAAOH,OAClCnB,QAASoB,KAAKzE,MAAMqD,QACpBR,OAAQ4B,KAAKzE,MAAM6C,OACnBK,aAAcuB,KAAKzE,MAAMuF,eACzBnB,UAAWK,KAAKzE,MAAMwF,qBAI1C,EAxCCjB,CAAyBnD,EAAAA,WAuG/B,GAAeqE,EAAAA,EAAAA,KACX5D,EAAAA,EAAAA,KApBkB,SAACC,GAAD,MAAwD,CAC1EuB,QAASvB,EAAMC,YAAYsB,QAC3BzB,KAAME,EAAMC,YAAYH,KACxBI,kBAAmBF,EAAMC,YAAYC,kBACrCqC,OAAQvC,EAAM4D,KAAKrB,OACnBxB,OAAQf,EAAMC,YAAYc,OAC1BiC,iBAAkBhD,EAAM4D,KAAKjE,MAcJ,CACrBkE,gBAAAA,EAAAA,GACAV,kBAAAA,EAAAA,GACAC,YAAAA,EAAAA,GACAK,eAAAA,EAAAA,GACAC,YAAAA,EAAAA,KAEJI,EAAAA,GARJ,CAUErB","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/MyPosts/ProfileStatusWithHooks.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"Profile_descriptionBlock__T0wfu\"};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__WnKSr\",\"posts\":\"MyPosts_posts__Ocy+a\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__fe6kd\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\n// let s = {\r\n//     'item': 'Profile_item__TYOiq',\r\n//     'content': 'Profile_content__LWBsZ '\r\n// }\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\nconst Post = (props:MessagePropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://www.ochkov.net/wiki/wiki/storage/app/uploads/public/5d7/a08/0c6/5d7a080c6de1b874225893.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>LIKE </span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../../utils/validators/valodators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsType = {\r\n    addPost: (newPost: string) => void\r\n    posts: PostsType[]\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    messageForNewPost: string\r\n}\r\n\r\ntype PostFormDataType = {\r\n    post: string\r\n}\r\n\r\nconst  maxLength10 =  maxLength(10)\r\n\r\nconst MyPostsForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLength10]}\r\n                   placeholder={'Post message'}\r\n            ></Field>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst PostReduxForm = reduxForm<PostFormDataType>({\r\n    form: 'post'\r\n})(MyPostsForm)\r\n\r\n\r\nconst MyPosts = React.memo( (props: MyPostsType) => {\r\n    const onSubmit = (formData: PostFormDataType) => {\r\n        props.addPost(formData.post)\r\n    }\r\n\r\n    let postElement = props.posts.map(p => <Post\r\n        key={p.id}\r\n        message={p.message}\r\n        likesCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <PostReduxForm onSubmit={onSubmit}/>\r\n            <div className={s.posts}>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts","import React, {ChangeEvent} from 'react';\r\nimport MyPosts from \"../MyPosts\";\r\nimport {addPostAC, changeNewTextAC} from \"../../../../redux/profile-reducer\";\r\nimport {ReduxStoreRootStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// type MyPostsContainerType = {\r\n// messageForNewPost: string\r\n// posts: ProfileType[]\r\n// dispatch: (action: ProfileActionsTypes) => void\r\n// store: StoreType\r\n// }\r\n// const MyPostsContainer = (props: any) => {\r\n//\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 store => {\r\n//                     let state = props.store.getState().profilePage\r\n//\r\n//                     const addPost = () => {\r\n//                         store.dispatch(addPostAC(state.messageForNewPost))\r\n//                     }\r\n//\r\n//                     const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//                         store.dispatch(changeNewTextAC(e.currentTarget.value))}\r\n//\r\n//\r\n//                     return (\r\n//                         <MyPosts addPost={addPost}\r\n//                                  onChange={onChange}\r\n//                                  posts={state.post}\r\n//                                  messageForNewPost={state.messageForNewPost}\r\n//                         />\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\nlet mapStateToProps = (state: ReduxStoreRootStateType) => {\r\n    return {\r\n        posts: state.profilePage.post,\r\n        messageForNewPost: state.profilePage.messageForNewPost\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            dispatch(addPostAC(newPost))\r\n        },\r\n        onChange: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            dispatch(changeNewTextAC(e.currentTarget.value))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype StatusType = {\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: StatusType) => {\r\n\r\n    const [editeMode, setEditeMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditeMode(true)\r\n    }\r\n\r\n    const deactivateMode = () => {\r\n        setEditeMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editeMode &&\r\n                <div>STATUS :\r\n                    <span onDoubleClick={activateMode}>{props.status || '------'}</span>\r\n                </div>\r\n            }\r\n            {editeMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateMode}\r\n                        autoFocus={true}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React, {ChangeEvent} from 'react';\r\nimport s from './Profile.module.css'\r\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\r\nimport {PostsType, ProfileType} from \"../../redux/profile-reducer\";\r\nimport userPhoto from '../../assets/images/UserIcon.png'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Box from \"@mui/material/Box\";\r\nimport ProfileStatusWithHooks from \"../../../src/components/Profile/MyPosts/ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    if (!props.profile) {\r\n        return <Box sx={{display: 'flex'}}>\r\n            <CircularProgress/>\r\n        </Box>\r\n        // return <div>Preloader</div>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files && e.target.files.length){\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img*/}\r\n            {/*        src='https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/a9e3440d-0f91-47a7-82c9-7c72df86c43d/ddzhn9j-59f0da47-6ed4-4e34-b732-aec2d19513d0.png/v1/fill/w_598,h_350,q_70,strp/harry_potter_and_the_chamber_of_secrets_fanart_07_by_vladislavpantic_ddzhn9j-350t.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9NjAwIiwicGF0aCI6IlwvZlwvYTllMzQ0MGQtMGY5MS00N2E3LTgyYzktN2M3MmRmODZjNDNkXC9kZHpobjlqLTU5ZjBkYTQ3LTZlZDQtNGUzNC1iNzMyLWFlYzJkMTk1MTNkMC5wbmciLCJ3aWR0aCI6Ijw9MTAyNCJ9XV0sImF1ZCI6WyJ1cm46c2VydmljZTppbWFnZS5vcGVyYXRpb25zIl19.Y9jlhivjYT4XS4LVTbDlVe2ipynHrHPquQ1WsaRE_8s'/>*/}\r\n            {/*</div>*/}\r\n            <div>\r\n                {props.profile.fullName}\r\n            </div>\r\n            <p>\r\n                About me: {props.profile.aboutMe}\r\n            </p>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={props.profile.photos?.large ? props.profile.photos.large : userPhoto}\r\n                />\r\n                {props.isOwner && <input type='file' onChange={mainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n            {/*<div>*/}\r\n            {/*    LookingForAJobDescription: {props.profile.lookingForAJobDescription}*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ninterface ProfilePropsTypeNew {\r\n    profile: ProfileType | null,\r\n    post: PostsType[]\r\n    messageForNewPost: string\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    isAuth: boolean\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsTypeNew) => {\r\n\r\n    if(!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport {\r\n    getStatusTC,\r\n    PostsType,\r\n    ProfileType, savePhotoTC,\r\n    setUsersProfile,\r\n    setUsersProfileTC,\r\n    updateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStoreRootStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        console.log(this.props)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId as string\r\n            //userId = '28555'\r\n\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.setUsersProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatusTC}\r\n                         savePhoto={this.props.savePhotoTC}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: ReduxStoreRootStateType): MapStatePropsForRedirectType => ({\r\n    //isAuth: state.auth.isAuth\r\n})\r\n\r\n//AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent)\r\n\r\n// let AuthRedirectComponent = (props: PropsType) => {\r\n//     if(!props.isAuth) return <Redirect to={'/login'}/>\r\n//     return <ProfileContainer {...props}/>\r\n// }\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    post: Array<PostsType>\r\n    messageForNewPost: string\r\n    profile: null | ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: string | null\r\n}\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    // isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    setUsersProfileTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC: (file: File) => void\r\n}\r\n\r\ntype ProfilePropsType = MapStatePropsType & MapDispatchPropsType // & MapStatePropsForRedirectType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nlet mapStateToProps = (state: ReduxStoreRootStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    post: state.profilePage.post,\r\n    messageForNewPost: state.profilePage.messageForNewPost,\r\n    isAuth: state.auth.isAuth,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id\r\n})\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\r\n\r\n// let WithDataContainerComponent = withRouter(AuthRedirectComponent)\r\n//\r\n// export default connect(mapStateToProps, {\r\n//     setUsersProfile,\r\n//     setUsersProfileTC\r\n// })(WithDataContainerComponent)\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setUsersProfile,\r\n        setUsersProfileTC,\r\n        getStatusTC,\r\n        updateStatusTC,\r\n        savePhotoTC\r\n    }),\r\n    withRouter,\r\n    // WithAuthRedirect\r\n)(ProfileContainer)"],"names":["props","className","s","src","message","likesCount","maxLength10","maxLength","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","React","postElement","posts","map","p","id","formData","addPost","post","connect","state","profilePage","messageForNewPost","dispatch","newPost","addPostAC","onChange","e","changeNewTextAC","currentTarget","value","MyPosts","useState","editeMode","setEditeMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","autoFocus","ProfileInfo","profile","Box","sx","display","CircularProgress","fullName","aboutMe","photos","large","userPhoto","isOwner","type","target","files","length","savePhoto","isAuth","to","ProfileContainer","userId","this","match","params","console","log","authorizedUserId","history","push","setUsersProfileTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","updateStatusTC","savePhotoTC","compose","auth","setUsersProfile","withRouter"],"sourceRoot":""}